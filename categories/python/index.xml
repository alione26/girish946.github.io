<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on girishjoshi.io</title>
    <link>http://girishjoshi.io/categories/python/</link>
    <description>Recent content in Python on girishjoshi.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2015 - 2017 Girish Joshi, all rights reserved.</copyright>
    <lastBuildDate>Tue, 02 Oct 2018 15:19:28 +0530</lastBuildDate>
    
	<atom:link href="http://girishjoshi.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ESP8266 Read ADC Values Micropython</title>
      <link>http://girishjoshi.io/post/esp8266-read-adc-values-micropython/</link>
      <pubDate>Tue, 02 Oct 2018 15:19:28 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/esp8266-read-adc-values-micropython/</guid>
      <description>ADC stands for &amp;ldquo;Analog to Digital Convertor&amp;rdquo;. As the name suggests, it takes an analog signal as input and gives it&amp;rsquo;s digital equivalent value as output. In embedded systems ADCs are used all the time whenever something is to be measured; be it the temprature, pressure, weight, voltage, current; anything like that.</description>
    </item>
    
    <item>
      <title>ESP8266 Using MQTT</title>
      <link>http://girishjoshi.io/post/esp8266-using-mqtt/</link>
      <pubDate>Thu, 23 Aug 2018 01:02:18 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/esp8266-using-mqtt/</guid>
      <description>MQTT MQTT is a lightweight publish/subscribe messaging transport designed for machine-to-machine “Internet of Things” connectivity. It’s been used in all sorts of industries from home automation and Facebook Messenger mobile app to health care and remote monitoring over satellite links.
Installing MQTT Broker On Fedora
$ sudo dnf install mosquitto On Debian based systems</description>
    </item>
    
    <item>
      <title>ESP8266 Access GPIO Using Micropython</title>
      <link>http://girishjoshi.io/post/esp8266-access-gpio-using-micropython/</link>
      <pubDate>Wed, 01 Aug 2018 23:36:28 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/esp8266-access-gpio-using-micropython/</guid>
      <description>In this post I&amp;rsquo;ll be writing about accessing GPIO ports on ESP8266.
Module machine contains the apis for the GPIO on ESP8266.
import machine pin = machine.Pin(2, machine.Pin.IN, machine.Pin.PULL_UP) To use a GPIO we need to configure it as either input or output. In the above example machine.Pin.IN configures the GPIO pin as an input, meaning you can connect a button like the one shown below to it.</description>
    </item>
    
    <item>
      <title>ESP8266 Connecting to WIFI and Making HTTP Requests using MicroPython</title>
      <link>http://girishjoshi.io/post/esp8266-connecting-to-wifi-and-making-http-requests-micropython/</link>
      <pubDate>Thu, 26 Jul 2018 00:14:15 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/esp8266-connecting-to-wifi-and-making-http-requests-micropython/</guid>
      <description>There are two WiFi interfaces, one for the station (when the ESP8266 connects to a router) and one for the access point (for other devices to connect to the ESP8266).
Here is an example to connect ESP8266 to your wifi router.
&amp;gt;&amp;gt;&amp;gt; import network &amp;gt;&amp;gt;&amp;gt; sta_if = network.WLAN(network.STA_IF) &amp;gt;&amp;gt;&amp;gt; sta_if.active() # check if station mode is activated or not.</description>
    </item>
    
    <item>
      <title>ESP8266 Deploying Micropython and Using REPL</title>
      <link>http://girishjoshi.io/post/esp8266-deploying-micropython-and-using-repl/</link>
      <pubDate>Fri, 13 Jul 2018 20:03:46 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/esp8266-deploying-micropython-and-using-repl/</guid>
      <description>ESP8266 The ESP8266 is a low-cost Wi-Fi microchip with full TCP/IP stack and microcontroller capability produced by Espressif Systems. One of the coolest things about this cip is it can run Micropython. If you are new to programming or hardware/embedded systems and want to get into those, ESP8266 is a good way to get started.</description>
    </item>
    
    <item>
      <title>Fabric a Great Tool to Automate Mundane Tasks</title>
      <link>http://girishjoshi.io/post/fabric-a-great-tool-to-automate-mundane-tasks/</link>
      <pubDate>Sat, 23 Jun 2018 11:44:32 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/fabric-a-great-tool-to-automate-mundane-tasks/</guid>
      <description>This is a late post, few months back I had to update a certain firmware for a logger device on to hundreds of the devices. For some reason at that time the OTA update mechanism which was already implemented on those devices did not work. As it was crucial to update all the devices as soon as possible, some work around for this problem had to be found.</description>
    </item>
    
    <item>
      <title>RaspberryPi GPIO Python</title>
      <link>http://girishjoshi.io/post/raspberrypi-gpio-python/</link>
      <pubDate>Sun, 10 Jun 2018 12:05:38 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/raspberrypi-gpio-python/</guid>
      <description>To access GPIO of Raspberry Pi using python, you need to have following dependencies installed.
 python-dev python-pip RPi.GPIO  to install python-dev and python-pip:
$ sudo apt-get install python-dev python-pip to install RPi.GPIO:
$ pip install RPi.GPIO  Once this is done you are all set to use the RPi GPIO.</description>
    </item>
    
    <item>
      <title>Keep your bash history clean using python</title>
      <link>http://girishjoshi.io/post/keepyourbashhistorycleanusingpython/</link>
      <pubDate>Tue, 21 Nov 2017 14:20:08 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/keepyourbashhistorycleanusingpython/</guid>
      <description>If you are someone who spend a lot of time in terminal, you might want not to have certain commands that you&amp;rsquo;ve used, in your bash history. The commands like &amp;lsquo;ls&amp;rsquo; which prints the contents of the directory to the standard output, or the terminal based games like &amp;ldquo;Moon Buggy&amp;rdquo; or &amp;ldquo;2048-cli&amp;rdquo; etc, the things which are not important enough and don&amp;rsquo;t have too complex commands to be stored in the bash history.</description>
    </item>
    
    <item>
      <title>Getting Started With PyQt</title>
      <link>http://girishjoshi.io/post/gettingstartedwithpyqt/</link>
      <pubDate>Mon, 20 Nov 2017 20:42:57 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/gettingstartedwithpyqt/</guid>
      <description>PyQt is one of the two most popular Python bindings for the Qt cross-platform GUI/XML/SQL C++ framework (another binding is PySide).
If you have ever used any distribution of linux, you must have heard about Qt and GTK. Most of the desktop enviornments in linux used either of those Gui Toolkits, for example Gnome, Unity, MATE, Cinnamon etc use Gtk while KDE, Razor-Qt etc use Qt for creating Graphical interfaces.</description>
    </item>
    
    <item>
      <title>R305 fingerprint module &#43; python</title>
      <link>http://girishjoshi.io/post/r305-fingerprint-module-with-python/</link>
      <pubDate>Mon, 19 Jun 2017 21:55:23 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/r305-fingerprint-module-with-python/</guid>
      <description>This is the post regarding the Python-R305 package.
R305 is a very common finger print sensor. It is quite cheap, has a storage capacity of 250 fingerprints.
I came across this module about one and a half year ago. I had to use it in a small project with Raspberry-Pi.</description>
    </item>
    
    <item>
      <title>Interfacing LTC6802-2 with OrangePi using Python.</title>
      <link>http://girishjoshi.io/post/ltc6802-2-python/</link>
      <pubDate>Mon, 05 Jun 2017 17:31:50 +0530</pubDate>
      
      <guid>http://girishjoshi.io/post/ltc6802-2-python/</guid>
      <description>LTC6802 The LTC6802 is a complete battery monitoring IC that includes a 12-bit ADC, a precision voltage reference, a high voltage input multiplexer and a serial interface. Each LTC6802-2 can measure up to 12 series connected bat-tery cells with an input common mode voltage up to 60V.
LTC6802 is a great option if you want to build battry monitoring system with more accuracy.</description>
    </item>
    
  </channel>
</rss>